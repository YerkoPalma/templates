#!/bin/sh

__dirname=$(dirname "$(readlink -f "$0")")
. "$(readlink -f "$__dirname/../shared.sh")"

parse_keywords () {
  keywords="$1"
  keywords="$(echo "$keywords" | sed 's/,/ /g' | sed 's/  / /g' | tr ' ' '\n')"
  str=""
  for f in $keywords; do
    str="$str\"$f\","
  done

  keywords="$str"
  keywords="$(echo "$keywords" | sed '$ s/,$//' | sed 's/,/, /' | tr ' ' '\n')"
  keywords="$(printf '[\n%s\n]\n' "$keywords")"
  keywords="$(printf '{\nkeywords: %s\n}' "$keywords")"
  echo "$keywords"
}

# define PROJECTNAME
if [ -z "$1" ]; then
  printf 'What is the name of the project?\n❯ '
  read -r PROJECTNAME
  if [ "$PROJECTNAME" = "" ]; then
    printf 'no name provided, exiting\n'
    exit 1
  fi
else
  PROJECTNAME="$1"
fi

# define DESCRIPTION
if [ -z "$2" ]; then
  printf 'What does this project do?\n❯ '
  read -r DESCRIPTION
  if [ "$DESCRIPTION" = "" ]; then
    printf 'no description provided, exiting\n'
    exit 1
  fi
else
  DESCRIPTION="$2"
fi

# define USERNAME
if [ -z "$3" ]; then
  printf 'Under what user on GitHub will this project live?\n❯ '
  read -r USERNAME
  if [ "$USERNAME" = "" ]; then
    printf 'no username provided, exiting\n'
    exit 1
  fi
else
  USERNAME="$3"
fi

# define KEYWORDS
if [ -z "$4" ]; then
  printf 'What keywords should we include?\n❯ '
  read -r KEYWORDS
else
  KEYWORDS="$4"
fi
keywords="$(parse_keywords "$KEYWORDS")"


# create base project
mkdir -p "$PROJECTNAME"
cd "$PROJECTNAME" || exit 1
savior api api "$DESCRIPTION" "$USERNAME" "$KEYWORDS"
savior web app "$DESCRIPTION" "$USERNAME" "$KEYWORDS"

# copy files
copy "$__dirname/_gitignore" ".gitignore"
copy "$__dirname/_travis.yml" ".travis.yml"
readf "$__dirname/index.js" > index.js

## api
## remove git
rm -rf api/.git
rm -f api/.gitignore
## remove node_modules
rm -rf api/node_modules
## remove package-lock
rm -f api/package-lock.json
## remove license
rm -f api/license
## remove readme
rm -f api/readme.md

## move package
readf "$__dirname/package.json" \
  | replace 'PROJECTNAME' "$PROJECTNAME" \
  | replace 'DESCRIPTION' "$DESCRIPTION" \
  | replace 'USERNAME' "$USERNAME" \
  > package.json
# merge dependencies
dev_dep="$(cat api/package.json | jq ". | {devDependencies: .devDependencies}")"
dep="$(cat api/package.json | jq ". | {dependencies: .dependencies}")"
pkg="$(cat package.json | jq ". + $dev_dep + $dep")"
echo "$pkg" > package.json
rm api/package.json

## move test
mkdir -p test/api
readf "api/test.js" \
  | replace_2 "const app = require('.')" "const app = require('..\/..\/index.js')" \
  > "test/api/test.js"
rm -f api/test.js

## new index
readf "$__dirname/api/index.js" > "api/index.js"

## app
## remove git
rm -rf app/.git
rm -f app/.gitignore
## remove license
rm -f app/license
## remove readme
rm -f app/readme.md

## dependencies
npm install
npm install -S serve-handler

# git
git init 
git add .
git commit -m "init"